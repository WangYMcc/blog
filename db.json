{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/hashmap.jpg","path":"images/hashmap.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/image/hashmap.jpg","hash":"febd516c2348917922085c13866b5ab833db47bf","modified":1631026211214},{"_id":"source/_posts/2021/2021-09-07-map.md","hash":"938c423670296c0f89a5f90114afd4144bbf692a","modified":1631026791296},{"_id":"source/_posts/about/about.md","hash":"f4c56503666ae6ef85e649a4d99cae35eebd08c7","modified":1630838949980},{"_id":"source/_posts/2021/2021-09-05-start-my-first-blog.md","hash":"9e4f779c769841db65319ba9e547a9b8868f1683","modified":1630846262301},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"source/images/hashmap.jpg","hash":"febd516c2348917922085c13866b5ab833db47bf","modified":1631026211214}],"Category":[{"name":"blog","_id":"ckta72qxj0002v0ts1plwe6ch"}],"Data":[],"Page":[],"Post":[{"title":"我的第一篇博客","excerpt":"新的开始，记录自己的变化","keywords":"博客,第一,首","_content":"\n## 开头\n&emsp;&emsp;很久之前就想着要写博客来记录一下我的生活，以及对学习到的相关的技术进行总结，但一直拖到了现在。主要是太懒以及太贪玩了，下班之后回到家总是不想动了，就想着看游戏看视频。今天开始，我会对自己学习到的知识定期做一个总结，也为了以后跳槽能去个好点的公司。\n\n## 结尾\n[我的github项目地址](https://github.com/WangYMcc/blog)\n","source":"_posts/2021/2021-09-05-start-my-first-blog.md","raw":"---\ntitle: 我的第一篇博客\ncategory: blog\ntags: [Other]\nexcerpt: 新的开始，记录自己的变化\nkeywords: 博客,第一,首\n---\n\n## 开头\n&emsp;&emsp;很久之前就想着要写博客来记录一下我的生活，以及对学习到的相关的技术进行总结，但一直拖到了现在。主要是太懒以及太贪玩了，下班之后回到家总是不想动了，就想着看游戏看视频。今天开始，我会对自己学习到的知识定期做一个总结，也为了以后跳槽能去个好点的公司。\n\n## 结尾\n[我的github项目地址](https://github.com/WangYMcc/blog)\n","slug":"2021/2021-09-05-start-my-first-blog","published":1,"date":"2021-09-05T10:40:17.852Z","updated":"2021-09-05T12:51:02.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckta72qxd0000v0tshwu907qe","content":"<h2 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h2><p>&emsp;&emsp;很久之前就想着要写博客来记录一下我的生活，以及对学习到的相关的技术进行总结，但一直拖到了现在。主要是太懒以及太贪玩了，下班之后回到家总是不想动了，就想着看游戏看视频。今天开始，我会对自己学习到的知识定期做一个总结，也为了以后跳槽能去个好点的公司。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p><a href=\"https://github.com/WangYMcc/blog\">我的github项目地址</a></p>\n","site":{"data":{}},"more":"<h2 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h2><p>&emsp;&emsp;很久之前就想着要写博客来记录一下我的生活，以及对学习到的相关的技术进行总结，但一直拖到了现在。主要是太懒以及太贪玩了，下班之后回到家总是不想动了，就想着看游戏看视频。今天开始，我会对自己学习到的知识定期做一个总结，也为了以后跳槽能去个好点的公司。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p><a href=\"https://github.com/WangYMcc/blog\">我的github项目地址</a></p>\n"},{"title":"Java HashMap","excerpt":"HashMap的学习总结","keywords":"Map,HashTable,Java","_content":"## HashMap\n\nHashMap是Java中最常用的键值对数据结构，其主要由数组+链表来实现的，Jdk1.8之后还加入红黑树的结构。下面我们来看看HashMap的主要属性：\n```java\n    public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable {\n        static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; //默认初始容量\n        static final int MAXIMUM_CAPACITY = 1 << 30; //最大容量\n        static final float DEFAULT_LOAD_FACTOR = 0.75f;  //默认负载因子\n        int threshold; //当前阈值，负载因子*数组大小\n        final float loadFactor; //负载因子\n        transient int size;  //当前容量\n        transient Node<K,V>[] table;  //键值对的数组\n        //.....\n    }\n```\nHashMap的键值对是一个Node数组，它实现了Map接口的Entry接口，Node为HashMap的基本组成单元，Node为单向链表，下面展示Node的源码：\n```java\n    static class Node<K,V> implements Map.Entry<K,V> {\n            final int hash;\n            final K key;\n            V value;\n            Node<K,V> next;\n    }\n```\nHashMap数组的每个元素初始值均为null\n\n![avatar](/images/hashmap.jpg)\n\n在JDK1.8以及之后的版本，当链表长度达到8时，会将链表转换成红黑树结构。\n\n除此之外，HashMap还有四个构造器:\n```$xslt\n    public HashMap() {} //无参构造函数，使用默认负载因子和默认容量\n    public HashMap(int initialCapacity) {} //带初始容量的构造函数，使用默认负载因子\n    public HashMap(int initialCapacity, float loadFactor) {} ////带初始容量的构造函数和负载因子的构造函数\n    public HashMap(Map<? extends K, ? extends V> m) {}  //带其他实现了Map接口的子类的构造函数，使用默认负载因子\n```\n除了最后一个构造函数创建的HashMap，其他的都会在第一次put的时候才会创建Node数组（调用的扩容方法）。put方法的实现如下：\n\n1、将key做hash运算，由它的hashCode与它本身低16位做亦或操作，得到该key的hash值；然后判断table数组是否为空，也就是是否为第一次put；\n\n2、若table数组为空，则进行扩容，如果不为空跳到第3步。\n\n&emsp;&emsp;1）扩容的机制很简单，如果当前容量大于最大容量，将阈值置为Int最大值，直接返回旧数组；\n\n&emsp;&emsp;2）如果当前容量扩容之后小于最大容量，将阈值和数组长度都扩容两倍，并将原数组的元素转移到新数组并返回新数组；（这里有种特殊情况，当扩容后的数组长度小于16时，阈值不变）\n\n&emsp;&emsp;3）如果当前容量为0且阈值不为0，即为第一次put，使用默认容量和传入的阈值构建数组；\n\n&emsp;&emsp;4）如果当前容量为0且阈值为0，即为第一次put，使用默认容量和默认阈值构建数组；\n\n3、获取key的下标，index = (数组长度-1)&hash；如果当前下标为空，直接构建Node节点放在头部。如果下标不为空，且key值相等，则将该key的val替换。如果是链表结构，直接加到链表尾部，而且如果长度>=8，还会转换为红黑树。如果是红黑树，则转换为TreeNode节点并加到叶子节点。\n\n4、key-val添加或替换之后，返回旧值；如果是下标为空直接添加Node节点在头部的情况，则modCount++，并判断是否重新扩容，返回旧值为null。\n\nHashMap的Get方法的实现也很简单，首先通过hash运算得到key的下标位置index，然后判断当前下标是否为空，如果为空直接返回null，如果不为空则依次判断该链表或者红黑树是否存在该key，存在则返回val，不存在则返null。\n\n## 扩展\n\ncompute(key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)：该方法不管key是否存在，都会调用remappingFunction计算之后得到新value，如果key存在且value不是null时将旧值替换，如果value为null则移除该节点（key不存在且value不为null则新增）。\n\ncomputeIfAbsent(key, BiFunction<? super K, ? super V, ? extends V> mappingFunction)：当key也不存在或者为null时，才会调用mappingFunction执行后得到的value，然后新增节点并返回value。（value存在则不调用直接返回value）\n\ncomputeIfPresent(key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)：当key存在，才会调用remappingFunction计算之后得到新的value，如果value为null会将节点删除并返回null，如果value不为null则会替换value值并返回value。\n\nputIfAbsent(K key, V value)：如果当前key不存在，将key-value插入到数组中并返回null（如果key存在且value为null，也会替换并返回null）；如果存在则返回value。\n\n\n\n","source":"_posts/2021/2021-09-07-map.md","raw":"---\ntitle: Java HashMap\ncategory: blog\ntags: [Java]\nexcerpt: HashMap的学习总结\nkeywords: Map,HashTable,Java\n---\n## HashMap\n\nHashMap是Java中最常用的键值对数据结构，其主要由数组+链表来实现的，Jdk1.8之后还加入红黑树的结构。下面我们来看看HashMap的主要属性：\n```java\n    public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable {\n        static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; //默认初始容量\n        static final int MAXIMUM_CAPACITY = 1 << 30; //最大容量\n        static final float DEFAULT_LOAD_FACTOR = 0.75f;  //默认负载因子\n        int threshold; //当前阈值，负载因子*数组大小\n        final float loadFactor; //负载因子\n        transient int size;  //当前容量\n        transient Node<K,V>[] table;  //键值对的数组\n        //.....\n    }\n```\nHashMap的键值对是一个Node数组，它实现了Map接口的Entry接口，Node为HashMap的基本组成单元，Node为单向链表，下面展示Node的源码：\n```java\n    static class Node<K,V> implements Map.Entry<K,V> {\n            final int hash;\n            final K key;\n            V value;\n            Node<K,V> next;\n    }\n```\nHashMap数组的每个元素初始值均为null\n\n![avatar](/images/hashmap.jpg)\n\n在JDK1.8以及之后的版本，当链表长度达到8时，会将链表转换成红黑树结构。\n\n除此之外，HashMap还有四个构造器:\n```$xslt\n    public HashMap() {} //无参构造函数，使用默认负载因子和默认容量\n    public HashMap(int initialCapacity) {} //带初始容量的构造函数，使用默认负载因子\n    public HashMap(int initialCapacity, float loadFactor) {} ////带初始容量的构造函数和负载因子的构造函数\n    public HashMap(Map<? extends K, ? extends V> m) {}  //带其他实现了Map接口的子类的构造函数，使用默认负载因子\n```\n除了最后一个构造函数创建的HashMap，其他的都会在第一次put的时候才会创建Node数组（调用的扩容方法）。put方法的实现如下：\n\n1、将key做hash运算，由它的hashCode与它本身低16位做亦或操作，得到该key的hash值；然后判断table数组是否为空，也就是是否为第一次put；\n\n2、若table数组为空，则进行扩容，如果不为空跳到第3步。\n\n&emsp;&emsp;1）扩容的机制很简单，如果当前容量大于最大容量，将阈值置为Int最大值，直接返回旧数组；\n\n&emsp;&emsp;2）如果当前容量扩容之后小于最大容量，将阈值和数组长度都扩容两倍，并将原数组的元素转移到新数组并返回新数组；（这里有种特殊情况，当扩容后的数组长度小于16时，阈值不变）\n\n&emsp;&emsp;3）如果当前容量为0且阈值不为0，即为第一次put，使用默认容量和传入的阈值构建数组；\n\n&emsp;&emsp;4）如果当前容量为0且阈值为0，即为第一次put，使用默认容量和默认阈值构建数组；\n\n3、获取key的下标，index = (数组长度-1)&hash；如果当前下标为空，直接构建Node节点放在头部。如果下标不为空，且key值相等，则将该key的val替换。如果是链表结构，直接加到链表尾部，而且如果长度>=8，还会转换为红黑树。如果是红黑树，则转换为TreeNode节点并加到叶子节点。\n\n4、key-val添加或替换之后，返回旧值；如果是下标为空直接添加Node节点在头部的情况，则modCount++，并判断是否重新扩容，返回旧值为null。\n\nHashMap的Get方法的实现也很简单，首先通过hash运算得到key的下标位置index，然后判断当前下标是否为空，如果为空直接返回null，如果不为空则依次判断该链表或者红黑树是否存在该key，存在则返回val，不存在则返null。\n\n## 扩展\n\ncompute(key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)：该方法不管key是否存在，都会调用remappingFunction计算之后得到新value，如果key存在且value不是null时将旧值替换，如果value为null则移除该节点（key不存在且value不为null则新增）。\n\ncomputeIfAbsent(key, BiFunction<? super K, ? super V, ? extends V> mappingFunction)：当key也不存在或者为null时，才会调用mappingFunction执行后得到的value，然后新增节点并返回value。（value存在则不调用直接返回value）\n\ncomputeIfPresent(key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)：当key存在，才会调用remappingFunction计算之后得到新的value，如果value为null会将节点删除并返回null，如果value不为null则会替换value值并返回value。\n\nputIfAbsent(K key, V value)：如果当前key不存在，将key-value插入到数组中并返回null（如果key存在且value为null，也会替换并返回null）；如果存在则返回value。\n\n\n\n","slug":"2021/2021-09-07-map","published":1,"date":"2021-09-06T16:12:31.515Z","updated":"2021-09-07T15:45:12.918Z","_id":"ckta72qxi0001v0ts3eq08bnt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>HashMap是Java中最常用的键值对数据结构，其主要由数组+链表来实现的，Jdk1.8之后还加入红黑树的结构。下面我们来看看HashMap的主要属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">//默认初始容量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>; <span class=\"comment\">//最大容量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;  <span class=\"comment\">//默认负载因子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> threshold; <span class=\"comment\">//当前阈值，负载因子*数组大小</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor; <span class=\"comment\">//负载因子</span></span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">//当前容量</span></span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;  <span class=\"comment\">//键值对的数组</span></span><br><span class=\"line\">    <span class=\"comment\">//.....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HashMap的键值对是一个Node数组，它实现了Map接口的Entry接口，Node为HashMap的基本组成单元，Node为单向链表，下面展示Node的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HashMap数组的每个元素初始值均为null</p>\n<p><img src=\"/images/hashmap.jpg\" alt=\"avatar\"></p>\n<p>在JDK1.8以及之后的版本，当链表长度达到8时，会将链表转换成红黑树结构。</p>\n<p>除此之外，HashMap还有四个构造器:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap() &#123;&#125; //无参构造函数，使用默认负载因子和默认容量</span><br><span class=\"line\">public HashMap(int initialCapacity) &#123;&#125; //带初始容量的构造函数，使用默认负载因子</span><br><span class=\"line\">public HashMap(int initialCapacity, float loadFactor) &#123;&#125; ////带初始容量的构造函数和负载因子的构造函数</span><br><span class=\"line\">public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;&#125;  //带其他实现了Map接口的子类的构造函数，使用默认负载因子</span><br></pre></td></tr></table></figure>\n<p>除了最后一个构造函数创建的HashMap，其他的都会在第一次put的时候才会创建Node数组（调用的扩容方法）。put方法的实现如下：</p>\n<p>1、将key做hash运算，由它的hashCode与它本身低16位做亦或操作，得到该key的hash值；然后判断table数组是否为空，也就是是否为第一次put；</p>\n<p>2、若table数组为空，则进行扩容，如果不为空跳到第3步。</p>\n<p>&emsp;&emsp;1）扩容的机制很简单，如果当前容量大于最大容量，将阈值置为Int最大值，直接返回旧数组；</p>\n<p>&emsp;&emsp;2）如果当前容量扩容之后小于最大容量，将阈值和数组长度都扩容两倍，并将原数组的元素转移到新数组并返回新数组；（这里有种特殊情况，当扩容后的数组长度小于16时，阈值不变）</p>\n<p>&emsp;&emsp;3）如果当前容量为0且阈值不为0，即为第一次put，使用默认容量和传入的阈值构建数组；</p>\n<p>&emsp;&emsp;4）如果当前容量为0且阈值为0，即为第一次put，使用默认容量和默认阈值构建数组；</p>\n<p>3、获取key的下标，index = (数组长度-1)&amp;hash；如果当前下标为空，直接构建Node节点放在头部。如果下标不为空，且key值相等，则将该key的val替换。如果是链表结构，直接加到链表尾部，而且如果长度&gt;=8，还会转换为红黑树。如果是红黑树，则转换为TreeNode节点并加到叶子节点。</p>\n<p>4、key-val添加或替换之后，返回旧值；如果是下标为空直接添加Node节点在头部的情况，则modCount++，并判断是否重新扩容，返回旧值为null。</p>\n<p>HashMap的Get方法的实现也很简单，首先通过hash运算得到key的下标位置index，然后判断当前下标是否为空，如果为空直接返回null，如果不为空则依次判断该链表或者红黑树是否存在该key，存在则返回val，不存在则返null。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>compute(key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)：该方法不管key是否存在，都会调用remappingFunction计算之后得到新value，如果key存在且value不是null时将旧值替换，如果value为null则移除该节点（key不存在且value不为null则新增）。</p>\n<p>computeIfAbsent(key, BiFunction&lt;? super K, ? super V, ? extends V&gt; mappingFunction)：当key也不存在或者为null时，才会调用mappingFunction执行后得到的value，然后新增节点并返回value。（value存在则不调用直接返回value）</p>\n<p>computeIfPresent(key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)：当key存在，才会调用remappingFunction计算之后得到新的value，如果value为null会将节点删除并返回null，如果value不为null则会替换value值并返回value。</p>\n<p>putIfAbsent(K key, V value)：如果当前key不存在，将key-value插入到数组中并返回null（如果key存在且value为null，也会替换并返回null）；如果存在则返回value。</p>\n","site":{"data":{}},"more":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>HashMap是Java中最常用的键值对数据结构，其主要由数组+链表来实现的，Jdk1.8之后还加入红黑树的结构。下面我们来看看HashMap的主要属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>; <span class=\"comment\">//默认初始容量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>; <span class=\"comment\">//最大容量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;  <span class=\"comment\">//默认负载因子</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> threshold; <span class=\"comment\">//当前阈值，负载因子*数组大小</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor; <span class=\"comment\">//负载因子</span></span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">//当前容量</span></span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Node&lt;K,V&gt;[] table;  <span class=\"comment\">//键值对的数组</span></span><br><span class=\"line\">    <span class=\"comment\">//.....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HashMap的键值对是一个Node数组，它实现了Map接口的Entry接口，Node为HashMap的基本组成单元，Node为单向链表，下面展示Node的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>HashMap数组的每个元素初始值均为null</p>\n<p><img src=\"/images/hashmap.jpg\" alt=\"avatar\"></p>\n<p>在JDK1.8以及之后的版本，当链表长度达到8时，会将链表转换成红黑树结构。</p>\n<p>除此之外，HashMap还有四个构造器:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap() &#123;&#125; //无参构造函数，使用默认负载因子和默认容量</span><br><span class=\"line\">public HashMap(int initialCapacity) &#123;&#125; //带初始容量的构造函数，使用默认负载因子</span><br><span class=\"line\">public HashMap(int initialCapacity, float loadFactor) &#123;&#125; ////带初始容量的构造函数和负载因子的构造函数</span><br><span class=\"line\">public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;&#125;  //带其他实现了Map接口的子类的构造函数，使用默认负载因子</span><br></pre></td></tr></table></figure>\n<p>除了最后一个构造函数创建的HashMap，其他的都会在第一次put的时候才会创建Node数组（调用的扩容方法）。put方法的实现如下：</p>\n<p>1、将key做hash运算，由它的hashCode与它本身低16位做亦或操作，得到该key的hash值；然后判断table数组是否为空，也就是是否为第一次put；</p>\n<p>2、若table数组为空，则进行扩容，如果不为空跳到第3步。</p>\n<p>&emsp;&emsp;1）扩容的机制很简单，如果当前容量大于最大容量，将阈值置为Int最大值，直接返回旧数组；</p>\n<p>&emsp;&emsp;2）如果当前容量扩容之后小于最大容量，将阈值和数组长度都扩容两倍，并将原数组的元素转移到新数组并返回新数组；（这里有种特殊情况，当扩容后的数组长度小于16时，阈值不变）</p>\n<p>&emsp;&emsp;3）如果当前容量为0且阈值不为0，即为第一次put，使用默认容量和传入的阈值构建数组；</p>\n<p>&emsp;&emsp;4）如果当前容量为0且阈值为0，即为第一次put，使用默认容量和默认阈值构建数组；</p>\n<p>3、获取key的下标，index = (数组长度-1)&amp;hash；如果当前下标为空，直接构建Node节点放在头部。如果下标不为空，且key值相等，则将该key的val替换。如果是链表结构，直接加到链表尾部，而且如果长度&gt;=8，还会转换为红黑树。如果是红黑树，则转换为TreeNode节点并加到叶子节点。</p>\n<p>4、key-val添加或替换之后，返回旧值；如果是下标为空直接添加Node节点在头部的情况，则modCount++，并判断是否重新扩容，返回旧值为null。</p>\n<p>HashMap的Get方法的实现也很简单，首先通过hash运算得到key的下标位置index，然后判断当前下标是否为空，如果为空直接返回null，如果不为空则依次判断该链表或者红黑树是否存在该key，存在则返回val，不存在则返null。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>compute(key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)：该方法不管key是否存在，都会调用remappingFunction计算之后得到新value，如果key存在且value不是null时将旧值替换，如果value为null则移除该节点（key不存在且value不为null则新增）。</p>\n<p>computeIfAbsent(key, BiFunction&lt;? super K, ? super V, ? extends V&gt; mappingFunction)：当key也不存在或者为null时，才会调用mappingFunction执行后得到的value，然后新增节点并返回value。（value存在则不调用直接返回value）</p>\n<p>computeIfPresent(key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)：当key存在，才会调用remappingFunction计算之后得到新的value，如果value为null会将节点删除并返回null，如果value不为null则会替换value值并返回value。</p>\n<p>putIfAbsent(K key, V value)：如果当前key不存在，将key-value插入到数组中并返回null（如果key存在且value为null，也会替换并返回null）；如果存在则返回value。</p>\n"},{"title":"About Me","menu":"about","excerpt":"关于我是谁","_content":"##### 2015年，考进重庆某大学软件工程系，开始接触编程。\n##### 2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\n##### 2021年，开始写博客记录自己。\n\n\n\n","source":"_posts/about/about.md","raw":"---\ntitle: About Me\nmenu: about\ntags: [Other]\nexcerpt: 关于我是谁\n---\n##### 2015年，考进重庆某大学软件工程系，开始接触编程。\n##### 2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\n##### 2021年，开始写博客记录自己。\n\n\n\n","slug":"about/about","published":1,"date":"2021-09-05T06:55:02.658Z","updated":"2021-09-05T10:49:09.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckta72qxl0004v0ts3cae5jkm","content":"<h5 id=\"2015年，考进重庆某大学软件工程系，开始接触编程。\"><a href=\"#2015年，考进重庆某大学软件工程系，开始接触编程。\" class=\"headerlink\" title=\"2015年，考进重庆某大学软件工程系，开始接触编程。\"></a>2015年，考进重庆某大学软件工程系，开始接触编程。</h5><h5 id=\"2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\"><a href=\"#2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\" class=\"headerlink\" title=\"2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\"></a>2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。</h5><h5 id=\"2021年，开始写博客记录自己。\"><a href=\"#2021年，开始写博客记录自己。\" class=\"headerlink\" title=\"2021年，开始写博客记录自己。\"></a>2021年，开始写博客记录自己。</h5>","site":{"data":{}},"more":"<h5 id=\"2015年，考进重庆某大学软件工程系，开始接触编程。\"><a href=\"#2015年，考进重庆某大学软件工程系，开始接触编程。\" class=\"headerlink\" title=\"2015年，考进重庆某大学软件工程系，开始接触编程。\"></a>2015年，考进重庆某大学软件工程系，开始接触编程。</h5><h5 id=\"2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\"><a href=\"#2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\" class=\"headerlink\" title=\"2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。\"></a>2019年，毕业后就职于一家中型传统IT公司，主要集中在存储领域。</h5><h5 id=\"2021年，开始写博客记录自己。\"><a href=\"#2021年，开始写博客记录自己。\" class=\"headerlink\" title=\"2021年，开始写博客记录自己。\"></a>2021年，开始写博客记录自己。</h5>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckta72qxd0000v0tshwu907qe","category_id":"ckta72qxj0002v0ts1plwe6ch","_id":"ckta72qxo0008v0ts9ohh8oca"},{"post_id":"ckta72qxi0001v0ts3eq08bnt","category_id":"ckta72qxj0002v0ts1plwe6ch","_id":"ckta72qxp000bv0tsare7gh6n"}],"PostTag":[{"post_id":"ckta72qxd0000v0tshwu907qe","tag_id":"ckta72qxl0003v0tsexo6hmoc","_id":"ckta72qxn0007v0tshowsa2yd"},{"post_id":"ckta72qxi0001v0ts3eq08bnt","tag_id":"ckta72qxm0006v0ts9nfi2m4m","_id":"ckta72qxo000av0ts4r4f8km0"},{"post_id":"ckta72qxl0004v0ts3cae5jkm","tag_id":"ckta72qxl0003v0tsexo6hmoc","_id":"ckta72qxp000cv0ts44l2c6fk"}],"Tag":[{"name":"Other","_id":"ckta72qxl0003v0tsexo6hmoc"},{"name":"Java","_id":"ckta72qxm0006v0ts9nfi2m4m"}]}}